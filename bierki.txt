# 1000 8 białe                          # 10000 16 czarne

# 001 1 Pionek-                         # 010 2 Pionek+
# 011 3 król                            # 011 3 król
# 100 4 koń                             # 100 4 koń
# 101 5 goniec                          # 101 5 goniec
# 110 6 wieża                           # 110 6 wieża
# 111 7 hetman                          # 111 7 hetman

# 1000 | 001 = 1001 9  biały Pionek     # 10000 | 001 = 10001 18 czarny Pionek
# 1000 | 011 = 1011 11 biały król       # 10000 | 011 = 10011 19 czarny król
# 1000 | 100 = 1100 12 biały koń        # 10000 | 100 = 10100 20 czarny koń
# 1000 | 101 = 1101 13 biały goniec     # 10000 | 101 = 10101 21 czarny goniec
# 1000 | 110 = 1110 14 biała wieża      # 10000 | 110 = 10110 22 czarna wieża
# 1000 | 111 = 1111 15 biały hetman     # 10000 | 111 = 10111 23 czarny hetman





int Plansza[128] = {                

    22, 20, 21, 23, 19, 21, 20, 22,     0, 0, 0, 0, 0, 0, 0, 0,
    18, 18, 18, 18, 18, 18, 18, 18,     0, 0, 0, 0, 0, 0, 0, 0,
     0,  0,  0,  0,  0,  0,  0,  0,     0, 0, 0, 0, 0, 0, 0, 0,
     0,  0,  0,  0,  0,  0,  0,  0,     0, 0, 0, 0, 0, 0, 0, 0,
     0,  0,  0,  0,  0,  0,  0,  0,     0, 0, 0, 0, 0, 0, 0, 0,
     0,  0,  0,  0,  0,  0,  0,  0,     0, 0, 0, 0, 0, 0, 0, 0,
     9,  9,  9,  9,  9,  9,  9,  9,     0, 0, 0, 0, 0, 0, 0, 0,
    14, 12, 13, 15, 11, 13, 12, 14,     0, 0, 0, 0, 0, 0, 0, 0,

};

To do:
    1. Roszada
    3. negamax
    4. (opcjonalnie) plansza ladna jest juz prawie ladna
if g


while(lista ruchow sie nie skonczyla){
    policzewaluacje(szachownicapowykonanymruchu(nibyruch))
    if policzewaluacje>dotychczasowawartoscmaksymalna{
        policzewaluacje = dotychczasowawartoscmaksymalna
    }
}


 szachownica * ZrobNibyRuch(szachownica *sz_znr, ruchy *nibyruch_znr){
    sz_znr->szachownica[nibyruch_znr->KwadratDocelowy]=sz_znr->szachownica[nibyruch_znr->KwadratZrodlowy];
    sz_znr->szachownica[nibyruch_znr->KwadratZrodlowy] = 0;
    return sz_znr;
 }

int NegaMax(szachownica *sz_nm, int glebokosc_nm, int alpha_nm, int beta_nm){
    
    int maxEval, minEval, eval;
    int ocena_nm;
    int nowaocena_nm;
    int ocenawezla_nm = -100;
    
    //zaalokowac pamiec tu trzeba
    ocena_nm = OcenaGry(sz_nm);
    if((glebokosc_nm == 0) || ocena_nm != 0){
        return ZliczanieBierkek(sz_nm);
    }
    for(ruchy *MozliweRuchy_nm = MozliweRuchy(sz_nm->strona, sz_nm), *ptr_nm = MozliweRuchy_nm; MozliweRuchy_nm; MozliweRuchy_nm = MozliweRuchy_nm->next, free(ptr_nm), ptr_nm = MozliweRuchy_nm){
        szachownica *Dziecko_nm;
        szachownica *nadpisanieszachownicy_nm;
        if(Dziecko_nm->strona == 8){
            Dziecko_nm->strona = 16;
        }
        else{
            Dziecko_nm->strona = 8;
        }
        Dziecko_nm = ZrobNibyRuch(sz_nm, MozliweRuchy_nm);
        nowaocena_nm = -NegaMax(Dziecko_nm, glebokosc_nm -1, -beta_nm, -alpha_nm);

        if(nowaocena_nm>ocenawezla_nm){
            ocenawezla_nm = nowaocena_nm;
        }

        if(ocenawezla_nm > alpha_nm){
            alpha_nm = ocenawezla_nm;
        }

        if(alpha_nm > beta_nm){
            break;
        }
    }
    return ocenawezla_nm;
}

// int negaMax(szachownica * sz_nm, int glebokosc_nm, int alfa_nm, int beta_nm)
// {
// if (!glebokosc_nm){
//     return ZliczanieBierkek(*sz_nm);
// }

//     int nowaocena_nm;
//     int ocenawezla_nm=-2000;
//     int i=0;
// for(ruchy *glowa_lr = ZrobListeRuchow(*sz_nm), *ptr = lr; lr; i++, lr = lr->next, free(ptr), ptr = lr)
// {
//     Plansza dziecko = wykonaj_ruch(*sz, ptr->kolumna); //plansza po ruchu to dziecko
//     nowaocena = -negmax(&dziecko, glebokosc - 1, -beta, -alfa);
//     // printf("iteracja:%d\n",i);
//     // printf("nowaocena1:%d\n",nowaocena);
//     // printf("ocenawezla1:%d\n",ocenawezla);
//     if (nowaocena > ocenawezla)
//     ocenawezla = nowaocena;
//     if (ocenawezla > alfa)
//     alfa = ocenawezla;
//     // printf("alfa:%d\n\n",alfa);
//     if (alfa > beta)
//     {
//         // zwolninenie listy ruchów do końca
//         break;
//     }
// }
//     return ocenawezla;
// }
